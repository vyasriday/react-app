{"version":3,"sources":["components/Movie.js","actions/movie.js","components/MoviesList.js","components/MovieDetails.js","actions/toggle.js","reducers/reducer.js","reducers/rootReducer.js","App.js","components/Toggle.js","serviceWorker.js","index.js"],"names":["Movie","props","movie","react_default","a","createElement","react_router_dom","to","concat","id","Poster","src","poster_path","alt","title","propTyoes","PropTypes","shape","string","isRequired","styled","img","_templateObject","GET_MOVIES","GET_MOVIE","EMPTY_MOVIE","getMovies","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","res","movies","wrap","_context","prev","next","fetch","sent","json","abrupt","type","data","results","stop","_x","apply","this","arguments","getMovie","_ref2","_callee2","_context2","_x2","resetMovie","MovieList","_this$props","isLoaded","_this$props2","MovieGrid","map","components_Movie","key","PureComponent","connect","state","moviesLoaded","bindActionCreators","div","MoviesList_templateObject","MovieDetails","movieID","backdrop_path","match","params","MovieWrapper","backdrop","overview","movieLoaded","MovieDetails_templateObject","TOGGLE_MESSAGE","messageVisibility","moviesState","toggleState","rootReducer","combineReducers","length","undefined","action","objectSpread","toggle","middleware","onClick","logger","thunk","store","createStore","load","composeWithDevTools","applyMiddleware","save","App","es","className","react_router","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c34ebcc6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Movie = (props) => {\r\n  const BACKDROP_PATH = 'https://image.tmdb.org/t/p/w154';\r\n  // eslint-disable-next-line react/prop-types\r\n  const { movie } = props;\r\n  return (\r\n    <Link to={`${movie.id}`}>\r\n      <Poster src={`${BACKDROP_PATH}${movie.poster_path}`} alt={movie.title} />\r\n    </Link>\r\n  );\r\n};\r\n\r\nMovie.propTyoes = {\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\nexport default Movie;\r\n\r\n// we can even export our styled components\r\nconst Poster = styled.img`\r\n  box-shadow: 0 0 35px black;\r\n  margin: 20px auto;\r\n`;\r\n","/* eslint-disable func-names */\r\n/* eslint-disable import/prefer-default-export */\r\n// this is an action creator\r\nexport const GET_MOVIES = 'GET_MOVIES';\r\nexport const GET_MOVIE = 'GET_MOVIE';\r\nexport const EMPTY_MOVIE = 'EMPTY_MOVIE';\r\n\r\nexport function getMovies() {\r\n  return async function (dispatch) {\r\n    const res = await fetch('https://api.themoviedb.org/3/discover/movie?api_key=4e062be51f8b55a66259160103b5f870&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1');\r\n    const movies = await res.json();\r\n    return dispatch({\r\n      type: GET_MOVIES,\r\n      data: movies.results,\r\n    });\r\n  };\r\n}\r\n\r\nexport function getMovie(id) {\r\n  return async function (dispatch) {\r\n    const res = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=4e062be51f8b55a66259160103b5f870&language=en-US`);\r\n    const movie = await res.json();\r\n    return dispatch({\r\n      type: GET_MOVIE,\r\n      data: movie,\r\n    });\r\n  };\r\n}\r\n\r\nexport function resetMovie() {\r\n  return {\r\n    type: EMPTY_MOVIE,\r\n  };\r\n}\r\n","/* eslint-disable react/prop-types */\r\nimport React, { PureComponent } from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport Movie from './Movie';\r\nimport { getMovies } from '../actions/movie';\r\n\r\n\r\nclass MovieList extends PureComponent {\r\n  componentDidMount() {\r\n    // eslint-disable-next-line no-shadow\r\n    const { isLoaded, getMovies } = this.props;\r\n    if (!isLoaded) {\r\n      getMovies();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // eslint-disable-next-line react/prop-types\r\n    const { movies, isLoaded } = this.props;\r\n    if (!isLoaded) return (<h3>Loading !!!</h3>);\r\n    return (\r\n      /*\r\n        * now here we replace the div with the MovieGrid.\r\n        * Basically this replaces it with a div with the styles we have applied.\r\n      */\r\n      <MovieGrid>\r\n        { movies.map(movie => <Movie key={movie.id} movie={movie} />)}\r\n      </MovieGrid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  movies: state.movies.movies,\r\n  isLoaded: state.movies.moviesLoaded,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n  getMovies,\r\n}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieList);\r\n\r\n// since we are applying this style on a div therefore styled.div\r\nconst MovieGrid = styled.div`\r\n  display: grid;\r\n  padding: 1rem;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  grid-row-gap: 1rem;\r\n  @media(max-width:900px) {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n  @media(max-width:700px) {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n  @media(max-width:550px) {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n  @media(max-width:380px) {\r\n    grid-template-columns: repeat(1, 1fr);\r\n  }\r\n`;\r\n","import React, { PureComponent } from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getMovie, resetMovie } from '../actions/movie';\r\n\r\nclass MovieDetails extends PureComponent {\r\n  /* eslint-disable */\r\n  movieID = '';\r\n  backdrop_path = 'https://image.tmdb.org/t/p/w1280';\r\n\r\n  componentWillMount() {\r\n    this.movieID = this.props.match.params.id;\r\n  }\r\n  \r\n  componentDidMount() {\r\n    const {getMovie, isLoaded} = this.props;\r\n    if(!isLoaded) {\r\n      getMovie(this.movieID);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { resetMovie } = this.props;\r\n    resetMovie();\r\n  }\r\n  render() {\r\n    const { movie } = this.props;\r\n    return (\r\n      //  Here we pass backdrop as  a prop which can be accessed down in styles\r\n      <MovieWrapper backdrop={`${this.backdrop_path}/${movie.backdrop_path}`} >\r\n        <h2>{movie.title}</h2>\r\n        <p>{movie.overview}</p>\r\n      </MovieWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  movie: state.movies.movie,\r\n  isLoaded: state.movies.movieLoaded,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n  getMovie,\r\n  resetMovie,\r\n}, dispatch)\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MovieDetails);\r\n\r\n// how do we pass our javascript data to our styled in styled components.\r\nconst MovieWrapper = styled.div`\r\n  position: relative;\r\n  padding-top: 50vh;\r\n  height: 50vh;\r\n  background: url(${props => props.backdrop}) no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  > p {\r\n    text-align: justify;\r\n    color: #fdfdfd;\r\n    font-size: 1rem;\r\n    line-height: 1.5;\r\n    padding: 4px 1rem;\r\n    background: #00000087;\r\n  }\r\n  > h2 {\r\n    font-sie: 3rem;\r\n    letter-spacing: 4px;\r\n    font-weight: bolder;\r\n    background: rgba(0,0,0 0.4);\r\n    padding: 0 2rem; \r\n  }\r\n`;","export const TOGGLE_MESSAGE = 'TOGGLE_MESSAGE';\r\n\r\n\r\nexport function messageVisibility() {\r\n  return {\r\n    type: TOGGLE_MESSAGE,\r\n  };\r\n}\r\n","import { GET_MOVIES, GET_MOVIE, EMPTY_MOVIE } from '../actions/movie';\r\nimport { TOGGLE_MESSAGE } from '../actions/toggle';\r\n// this is the initial state for this reducer only.\r\nconst moviesState = {\r\n  movies: [],\r\n  moviesLoaded: false,\r\n  movie: {},\r\n  movieLoaded: false,\r\n};\r\n\r\nconst toggleState = {\r\n  messageVisibility: false,\r\n};\r\n\r\nexport default function (state = moviesState, action) {\r\n  const { type } = action;\r\n  switch (type) {\r\n    case GET_MOVIES:\r\n      return {\r\n        ...state,\r\n        movies: action.data,\r\n        moviesLoaded: true,\r\n      };\r\n    case GET_MOVIE:\r\n      return {\r\n        movie: action.data,\r\n        movieLoaded: true,\r\n      };\r\n    case EMPTY_MOVIE:\r\n      return {\r\n        movie: {},\r\n        movieLoaded: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nexport function toggle(state = toggleState, action) {\r\n  const { type } = action;\r\n  switch (type) {\r\n    case TOGGLE_MESSAGE:\r\n      return {\r\n        messageVisibility: !state.messageVisibility,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport movies, { toggle } from './reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  movies,\r\n  toggle,\r\n});\r\n\r\nexport default rootReducer;\r\n","/* eslint-disable import/no-named-as-default-member */\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport './App.css';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { save, load } from 'redux-localstorage-simple';\nimport MovieList from './components/MoviesList';\nimport MovieDetails from './components/MovieDetails';\nimport rootReducer from './reducers/rootReducer';\nimport Toggle from './components/Toggle';\n\nconst middleware = [logger, thunk];\n//  instead of {} as initial state we pass load function which checks for initial state in localStorage\nconst store = createStore(\n  rootReducer,\n  load(),\n  composeWithDevTools(applyMiddleware(...middleware, save())),\n);\n\nconst App = () => (\n  /*\n    * Provider must wrap around our entire App.\n    * Provider takes two props, one store and other as children our entire App\n  */\n  <Provider store={store}>\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Link to=\"/\">\n            <h3> React App </h3>\n          </Link>\n        </header>\n        {/* <Toggle /> */}\n        <main>\n          <Switch>\n            <Route path=\"/:id\" component={MovieDetails} />\n            <Route exact path=\"/\" component={MovieList} />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  </Provider>\n);\n\nexport default App;\n","/* eslint-disable no-shadow */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getMovies } from '../actions/movie';\r\nimport { messageVisibility } from '../actions/toggle';\r\n\r\n\r\nconst Toggle = (props) => {\r\n  // eslint-disable-next-line react/prop-types\r\n  const { getMovies, messageVisibility } = props;\r\n  return (\r\n    <div>\r\n      {messageVisibility && <p>Redux Magic</p>}\r\n      <button onClick={messageVisibility} type=\"button\">Toggle</button>\r\n      <button onClick={getMovies} type=\"button\">Load Movies</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  messageVisibility: state.toggle.messageVisibility,\r\n});\r\n\r\n// eslint-disable-next-line max-len\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n  getMovies,\r\n  messageVisibility,\r\n}, dispatch);\r\n\r\n/* mapToState must be first argument, If not present pass null.\r\n* Otherwise dispatch won't be available to component\r\n*/\r\n// export default connect(null, mapDispatchToProps)(Toggle);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Toggle);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/* eslint-disable */\nimport App, {} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}