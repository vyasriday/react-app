{"version":3,"sources":["logo.svg","Movie.js","MoviesList.js","MovieDetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movie","props","movie","react_default","a","createElement","react_router_dom","to","concat","id","Poster","src","poster_path","alt","title","propTyoes","PropTypes","shape","string","isRequired","styled","img","_templateObject","MovieList","state","movies","fetch","res","json","this","setState","results","MovieGrid","map","src_Movie","key","PureComponent","div","MoviesList_templateObject","MovieDetails","movieID","backdrop_path","match","params","MovieWrapper","backdrop","overview","MovieDetails_templateObject","App","className","logo","react_router","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gbCKxC,IAAMC,EAAQ,SAACC,GACb,IAEQC,EAAUD,EAAVC,MACR,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAE,GAAAC,OAAKN,EAAMO,KACjBN,EAAAC,EAAAC,cAACK,EAAD,CAAQC,IAAG,GAAAH,OALO,mCAKPA,OAAqBN,EAAMU,aAAeC,IAAKX,EAAMY,UAKtEd,EAAMe,UAAY,CAChBb,MAAOc,IAAUC,MAAM,CACrBH,MAAOE,IAAUE,OAAOC,aACvBA,YAEUnB,QAGFU,EAASU,IAAOC,IAAVC,qLCYJC,6MA9BbC,MAAQ,CACNC,OAAQ,gOAMYC,MAAK,4LAAjBC,kBACeA,EAAIC,cAAnBH,SACNI,KAAKC,SAAS,CACZL,OAAQA,EAAOM,oNAQnB,OAKE5B,EAAAC,EAAAC,cAAC2B,EAAD,KACGH,KAAKL,MAAMC,OAAOQ,IAAI,SAAA/B,GAAK,OAAIC,EAAAC,EAAAC,cAAC6B,EAAD,CAAOC,IAAKjC,EAAMO,GAAIP,MAAOA,cA1B7CkC,iBAkClBJ,EAAYZ,IAAOiB,IAAVC,8hBCAAC,6MAjCbC,QAAU,KACVC,cAAgB,qCAChBjB,MAAQ,CACNtB,MAAO,wFAIP2B,KAAKW,QAAUX,KAAK5B,MAAMyC,MAAMC,OAAOlC,wLAKnBiB,MAAK,sCAAAlB,OAAuCqB,KAAKW,QAA5C,2EAAjBb,kBACcA,EAAIC,cAAlB1B,SACN2B,KAAKC,SAAS,CACZ5B,oNAMG,IACCA,EAAU2B,KAAKL,MAAftB,MACR,OAEEC,EAAAC,EAAAC,cAACuC,EAAD,CAAcC,SAAQ,GAAArC,OAAKqB,KAAKY,cAAV,KAAAjC,OAA2BN,EAAMuC,gBACrDtC,EAAAC,EAAAC,cAAA,UAAKH,EAAMY,OACXX,EAAAC,EAAAC,cAAA,SAAIH,EAAM4C,kBA7BSV,iBAqCrBQ,EAAexB,IAAOiB,IAAVU,IAIE,SAAA9C,GAAK,OAAIA,EAAM4C,WCZpBG,EAnBH,kBACV7C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAK4C,UAAU,OACb9C,EAAAC,EAAAC,cAAA,UAAQ4C,UAAU,cAChB9C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KACPJ,EAAAC,EAAAC,cAAA,OAAKM,IAAKuC,IAAMD,UAAU,WAAWpC,IAAI,OAG7CV,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACEhD,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,KAAK,OAAOC,UAAWd,IAC9BpC,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAK,IAAIC,UAAW9B,SCZvBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2DCXNiB,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b7218c2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ff9a163f.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Movie = (props) => {\r\n  const BACKDROP_PATH = 'https://image.tmdb.org/t/p/w154';\r\n  // eslint-disable-next-line react/prop-types\r\n  const { movie } = props;\r\n  return (\r\n    <Link to={`${movie.id}`}>\r\n      <Poster src={`${BACKDROP_PATH}${movie.poster_path}`} alt={movie.title} />\r\n    </Link>\r\n  );\r\n};\r\n\r\nMovie.propTyoes = {\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\nexport default Movie;\r\n\r\n// we can even export our styled components\r\nexport const Poster = styled.img`\r\n  box-shadow: 0 0 35px black;\r\n`;\r\n","import React, { PureComponent } from 'react';\r\nimport styled from 'styled-components';\r\nimport Movie from './Movie';\r\n\r\nclass MovieList extends PureComponent {\r\n  /* eslint-disable */\r\n  state = {\r\n    movies: []\r\n  }\r\n\r\n \r\n  async componentDidMount() {\r\n    try {\r\n      const res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=4e062be51f8b55a66259160103b5f870&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`);\r\n      const movies = await res.json();\r\n      this.setState({\r\n        movies: movies.results\r\n      })\r\n    } catch(e) {\r\n      throw e;\r\n    } \r\n  }\r\n  render() {\r\n\r\n    return (\r\n      /* \r\n        * now here we replace the div with the MovieGrid. \r\n        * Basically this replaces it with a div with the styles we have applied.\r\n      */\r\n      <MovieGrid>\r\n        {this.state.movies.map(movie => <Movie key={movie.id} movie={movie}/>)}\r\n      </MovieGrid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieList;\r\n// since we are applying this style on a div therefore styled.div\r\nconst MovieGrid = styled.div`\r\n  display: grid;\r\n  padding: 1rem;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  grid-row-gap: 1rem;\r\n`;","import React, { PureComponent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nclass MovieDetails extends PureComponent {\r\n  /* eslint-disable */\r\n  movieID = '';\r\n  backdrop_path = 'https://image.tmdb.org/t/p/w1280';\r\n  state = {\r\n    movie: {}\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.movieID = this.props.match.params.id;\r\n  }\r\n  \r\n  async componentDidMount() {\r\n    try {\r\n      const res = await fetch(`https://api.themoviedb.org/3/movie/${this.movieID}?api_key=4e062be51f8b55a66259160103b5f870&language=en-US`)\r\n      const movie = await res.json();\r\n      this.setState({\r\n        movie,\r\n      })\r\n    } catch(e) {\r\n      throw e;\r\n    }\r\n  }\r\n  render() {\r\n    const { movie } = this.state;\r\n    return (\r\n      //  Here we pass backdrop as  a prop which can be accessed down in styles\r\n      <MovieWrapper backdrop={`${this.backdrop_path}/${movie.backdrop_path}`} >\r\n        <h2>{movie.title}</h2>\r\n        <p>{movie.overview}</p>\r\n      </MovieWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieDetails;\r\n// how do we pass our javascript data to our styled in styled components.\r\nconst MovieWrapper = styled.div`\r\n  position: relative;\r\n  padding-top: 50vh;\r\n  height: 50vh;\r\n  background: url(${props => props.backdrop}) no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  > p {\r\n    text-align: justify;\r\n    color: #fdfdfd;\r\n    font-size: 1.2rem;\r\n    line-height: 1;\r\n    letter-spacing: 1px;\r\n    padding: 0 1rem;\r\n  }\r\n  > h2 {\r\n    font-sie: 3rem;\r\n    letter-spacing: 4px;\r\n    font-weight: bolder;\r\n    background: rgba(0, 200, 150, 0.2);\r\n    padding: 0 2rem; \r\n  }\r\n`;","/* eslint-disable import/no-named-as-default-member */\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n} from 'react-router-dom';\nimport './App.css';\nimport logo from './logo.svg';\nimport MovieList from './MoviesList';\nimport MovieDetails from './MovieDetails';\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/\">\n          <img src={logo} className=\"App-logo\" alt=\"\" />\n        </Link>\n      </header>\n      <main>\n        <Switch>\n          <Route path=\"/:id\" component={MovieDetails} />\n          <Route exact path=\"/\" component={MovieList} />\n        </Switch>\n      </main>\n    </div>\n  </Router>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/* eslint-disable */\nimport App, {} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}